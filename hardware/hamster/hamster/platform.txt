#
#	Map of STM32 cube MX CMSIS HAL drivers to underlay maple libs
#
#  configured by sheepdoll (Julie S Porter) 2015
#  modified by Baram
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification
# http://stm32duino.com/
# http://oroca.org

name=HAMSTER
version=1.0.0

compiler.warning_flags=-w -DDEBUG_LEVEL=DEBUG_NONE
compiler.warning_flags.none=-w -DDEBUG_LEVEL=DEBUG_NONE
compiler.warning_flags.default=-DDEBUG_LEVEL=DEBUG_NONE
compiler.warning_flags.more=-Wall -DDEBUG_LEVEL=DEBUG_FAULT
compiler.warning_flags.all=-Wall -Wextra -DDEBUG_LEVEL=DEBUG_ALL

# compiler variables
# ----------------------
compiler.path=D:/tools/mingw64/bin/
compiler.c.cmd=gcc
compiler.c.flags=-c -g -O2 -std=gnu99 {compiler.warning_flags} -MMD -ffunction-sections -fdata-sections --param max-inline-insns-single=500 -DBOARD_{build.variant}
compiler.c.elf.cmd=g++
compiler.c.elf.flags=-Os -Wl,--gc-sections
compiler.S.cmd=gcc
compiler.S.flags=-c -g -x assembler-with-cpp -MMD
compiler.cpp.cmd=g++
compiler.cpp.flags=-c -g -O2 {compiler.warning_flags} -MMD -ffunction-sections -fdata-sections --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -DBOARD_{build.variant}
compiler.ar.cmd=ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.elf2hex.flags=-O binary
compiler.elf2hex.cmd=objcopy
compiler.ldflags=
compiler.size.cmd=size
compiler.define=-DARDUINO=


build.cpu_flags=
build.hs_flag=
build.upload_flags=
#build.extra_flags= {build.upload_flags} {build.cpu_flags} {build.hs_flag} {build.common_flags}


# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.cpp.extra_flags=
compiler.S.extra_flags=
compiler.ar.extra_flags=



## Compiler include paths



# sheepdoll a better more generic library include paths
compiler.libs.c.flags= "-I{build.variant.path}/{build.inc1}" "-I{build.variant.path}/{build.inc2}" "-I{build.variant.path}/{build.inc3}" "-I{build.variant.path}/{build.inc4}" "-I{build.variant.path}/{build.inc5}" "-I{build.variant.path}/{build.inc6}" "-I{build.variant.path}/{build.inc7}"



# build patterns
# ---------------------

## Compile c files
recipe.c.o.pattern=		"{compiler.path}{compiler.c.cmd}" 	{compiler.c.flags}  -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {build.cpu_flags} {build.common_flags} {compiler.libs.c.flags} {includes} "{source_file}" -MMD -o "{object_file}"
###

## Compile c++ files
recipe.cpp.o.pattern=	"{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {build.cpu_flags} {build.hs_flag} {build.common_flags} {compiler.libs.c.flags} {includes} "{source_file}" -o "{object_file}"
#### {compiler.libs.c.flags}  before includes

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.S.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {build.cpu_flags} {build.hs_flag} {build.common_flags} {compiler.libs.c.flags} {includes} "{source_file}" -o "{object_file}"
recipe.s.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.S.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {build.cpu_flags} {build.hs_flag} {build.common_flags} {compiler.libs.c.flags} {includes} "{source_file}" -o "{object_file}"


## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} -o "{build.path}/{build.project_name}.exe" "-L{build.path}" -lm {object_files} "{build.path}/{archive_file}"
# Create eeprom
recipe.objcopy.eep.pattern=

## Create hex or binary
#recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}" "{build.path}/{build.project_name}.bin"



## Compute size
# ---------------------
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.exe"
recipe.size.regex=^(?:\.text|\.data|\.rodata|\.text.align|\.ARM.exidx)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*


# Uploader tools
# -------------------
#tools.openocd.cmd=openocd
#tools.openocd.cmd.windows=openocd.exe
#tools.openocd.path={runtime.tools.orocaboy_tools.path}/win
tools.cmd_run.cmd.windows=cmd_run.bat
tools.cmd_run.cmd={build.project_name}.exe
tools.cmd_run.cmd.windows={build.project_name}.exe
tools.cmd_run.path={compiler.path}


tools.cmd_run.upload.params.verbose=-d
tools.cmd_run.upload.params.quiet=n
#tools.openocd.upload.pattern="{path}/{cmd}" -s {path}/scripts  -f interface/stlink-v2-1.cfg -f target/stm32l4x.cfg -c "program {{{build.path}/{build.project_name}.elf}}"  -c "reset run" -c shutdown
#tools.openocd.upload.pattern="start cmd /c" {path}/{cmd}
tools.cmd_run.upload.pattern="d:/cmd_run.bat" {build.path}/{cmd}
